--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=7 LPM_WIDTH=3 data enable eq
--VERSION_BEGIN 22.1 cbx_cycloneii 2022:10:25:15:36:38:SC cbx_lpm_add_sub 2022:10:25:15:36:38:SC cbx_lpm_compare 2022:10:25:15:36:38:SC cbx_lpm_decode 2022:10:25:15:36:36:SC cbx_mgl 2022:10:25:15:36:55:SC cbx_nadder 2022:10:25:15:36:38:SC cbx_stratix 2022:10:25:15:36:38:SC cbx_stratixii 2022:10:25:15:36:38:SC  VERSION_END


-- Copyright (C) 2022  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 8 
SUBDESIGN decode_cla
( 
	data[2..0]	:	input;
	enable	:	input;
	eq[6..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[6..0]	: WIRE;
	eq_wire[7..0]	: WIRE;
	w_anode479w[3..0]	: WIRE;
	w_anode496w[3..0]	: WIRE;
	w_anode506w[3..0]	: WIRE;
	w_anode516w[3..0]	: WIRE;
	w_anode526w[3..0]	: WIRE;
	w_anode536w[3..0]	: WIRE;
	w_anode546w[3..0]	: WIRE;
	w_anode556w[3..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[6..0] = eq_wire[6..0];
	eq_wire[] = ( w_anode556w[3..3], w_anode546w[3..3], w_anode536w[3..3], w_anode526w[3..3], w_anode516w[3..3], w_anode506w[3..3], w_anode496w[3..3], w_anode479w[3..3]);
	w_anode479w[] = ( (w_anode479w[2..2] & (! data_wire[2..2])), (w_anode479w[1..1] & (! data_wire[1..1])), (w_anode479w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode496w[] = ( (w_anode496w[2..2] & (! data_wire[2..2])), (w_anode496w[1..1] & (! data_wire[1..1])), (w_anode496w[0..0] & data_wire[0..0]), enable_wire);
	w_anode506w[] = ( (w_anode506w[2..2] & (! data_wire[2..2])), (w_anode506w[1..1] & data_wire[1..1]), (w_anode506w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode516w[] = ( (w_anode516w[2..2] & (! data_wire[2..2])), (w_anode516w[1..1] & data_wire[1..1]), (w_anode516w[0..0] & data_wire[0..0]), enable_wire);
	w_anode526w[] = ( (w_anode526w[2..2] & data_wire[2..2]), (w_anode526w[1..1] & (! data_wire[1..1])), (w_anode526w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode536w[] = ( (w_anode536w[2..2] & data_wire[2..2]), (w_anode536w[1..1] & (! data_wire[1..1])), (w_anode536w[0..0] & data_wire[0..0]), enable_wire);
	w_anode546w[] = ( (w_anode546w[2..2] & data_wire[2..2]), (w_anode546w[1..1] & data_wire[1..1]), (w_anode546w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode556w[] = ( (w_anode556w[2..2] & data_wire[2..2]), (w_anode556w[1..1] & data_wire[1..1]), (w_anode556w[0..0] & data_wire[0..0]), enable_wire);
END;
--VALID FILE
