module vgaController
# (
    parameter SPRITE_ROM_FILENAME = "../../roms/sprites.bin",
	 parameter VRAM_FILENAME = "../../roms/vram.hex",
	 parameter CRAM_FILENAME = "../../roms/cram.hex"
	 )
(
	input vgaClk,
	input rst,
	output h_sync,
	output v_sync,
	output[3:0] vRed,
	output[3:0] vGreen,
	output[3:0] vBlue
);

    parameter h_pixels = 799;   // horizontal pixels per line
    parameter v_lines = 520;    // vertical lines per frame
    parameter h_pulse = 96;     // hsync pulse length
    parameter v_pulse = 2;      // vsync pulse length
    parameter hbp = 144;        // end of horizontal back porch
    parameter hfp = 784;        // beginning of horizontal front porch
    parameter vbp = 31;         // end of vertical back porch
    parameter vfp = 511;        // beginning of vertical front porch
	 	 
	 reg [9:0] h_cnt;
    reg [9:0] v_cnt;
	 
	 wire h_active;
    wire v_active;

    assign h_active = (h_cnt >= hbp && h_cnt < hfp);
    assign v_active = (v_cnt >= vbp && v_cnt < vfp);
	 
	 always @(posedge vgaClk or posedge rst)
    begin
        if (rst)
        begin
            h_cnt <= 10'd0;
            v_cnt <= 10'd0;
        end
        else
        begin
            if (h_cnt < h_pixels)
                h_cnt <= h_cnt + 1;

            else
            begin
                // reset horizontal counters
                h_cnt <= 0;

                if (v_cnt < v_lines)
                begin
                    v_cnt <= v_cnt + 1;
                end
                else
                begin
                    // reset vertical counters
                    v_cnt <= 0;
                end
            end
        end
    end
	 
	 assign h_sync = (h_cnt < h_pulse) ? 0 : 1;
    assign v_sync = (v_cnt < v_pulse) ? 0 : 1;
	 
	 
	 parameter screenwidth = 640;
	 parameter screenHeight = 480;
	 
	 parameter spriteWidth = 16;
	 parameter spriteHeight = 16;
	 
	 parameter hSpriteCount = 40;
	 parameter vSpriteCount = 30;
	 
	 parameter spriteMemSize = 768;
	 
	 
	 parameter charSpriteX = 333;
	 parameter charSpriteY = 278;
	 parameter  spriteLoc = 2;
	 
	 
	 reg [10:0] vRamPos;
	 reg [12:0] fontRomPosRed;
	 reg [12:0] fontRomPosGreen;
	 reg [12:0] fontRomPosBlue;
	 
	 wire [7:0] vRamOut;
	 wire [3:0] fontRomRed;
	 wire [3:0] fontRomGreen;
	 wire [3:0] fontRomBlue;
	 
	 wire cRamPos;
	 wire [7:0]cRamOut;
	 
	 	vram #(
			.VRAM_FILENAME(VRAM_FILENAME)
		) vram_inst(
			.clk(vgaClk),
		  .addr(vRamPos),
		  //.data_in(dataBus),
		  //.write_en(~z80_write),
		  .data_out(vRamOut)
		);
		 
		spriteRom #(
			.SPRITE_ROM_FILENAME(SPRITE_ROM_FILENAME)
		) spriteRom_inst(
			.redAddr(fontRomPosRed),
			.greenAddr(fontRomPosGreen),
			.blueAddr(fontRomPosBlue),
			.dataR(fontRomRed),
			.dataG(fontRomGreen),
			.dataB(fontRomBlue)
		);
	   input clk,
		
  wire [7:0] vgaAddr1,
  wire [7:0] vgaAddr2,
  wire [7:0] vgaOut1,
  wire [7:0] vgaOut2,
  wire [7:0] cpuAddr,
  wire [7:0] cpuOut,
  //wire [7:0] data_in,
  //wire write_en,
	 
	 	characterRam #(
			.VRAM_FILENAME(VRAM_FILENAME)
		) characterRam_inst(
			.clk(vgaClk),
		  //.cpuAddr(vRamPos),
		  //.cpuOut(vRamOut)
		  .vgaAddr1(vgaAddr1),
		  .vgaAddr2(vgaAddr2),
		  .vgaOut1(vgaOut1),
		  .vgaOut2(vgaOut2)
		  //.data_in(dataBus),
		  //.write_en(~z80_write),
		);
	 
	 
	 always @(posedge vgaClk or posedge rst) 
		 begin
			if(rst) 
				begin
					vRamPos <= 9'b0;
					fontRomPosRed <= 9'b0;
					fontRomPosGreen <= 9'b0;
					fontRomPosBlue <= 9'b0;
				end 
				
			else 
				begin
					if(h_active && v_active)
						begin
						   integer charIndex;
							for(charIndex = 0; charIndex <120; charIndex = charIndex+6) begin
								vgaAddr1 = charIndex;
								if(vgaOut1 != 0) begin
									vgaAddr1 = charIndex;
									vgaAddr2 = charIndex;
									if(h_cnt >= charSpriteX && h_cnt <= charSpriteX +15 && v_cnt >= charSpriteY && v_cnt <= charSpriteY +15)
									begin
									
								end
							
							
							end
							
						
							if(h_cnt >= charSpriteX && h_cnt <= charSpriteX +15 && v_cnt >= charSpriteY && v_cnt <= charSpriteY +15)
								begin
									fontRomPosRed <= (((v_cnt-vbp) % spriteHeight) * spriteWidth +((h_cnt-hbp) % spriteWidth)) * 3 + spriteLoc * spriteMemSize;
									fontRomPosGreen <= (((v_cnt-vbp) % spriteHeight) * spriteWidth +(h_cnt-hbp) % spriteWidth) * 3 + 1 + spriteLoc * spriteMemSize;
									fontRomPosBlue <= (((v_cnt-vbp) % spriteHeight) * spriteWidth +(h_cnt-hbp) % spriteWidth) * 3 + 2 + spriteLoc * spriteMemSize;
								end
							else
								begin
									vRamPos <= (v_cnt-vbp)/spriteHeight * hSpriteCount + (h_cnt-hbp)/spriteWidth;
									fontRomPosRed <= (((v_cnt-vbp) % spriteHeight) * spriteWidth +((h_cnt-hbp) % spriteWidth)) * 3 + vRamOut * spriteMemSize;
									fontRomPosGreen <= (((v_cnt-vbp) % spriteHeight) * spriteWidth +(h_cnt-hbp) % spriteWidth) * 3 + 1 + vRamOut * spriteMemSize;
									fontRomPosBlue <= (((v_cnt-vbp) % spriteHeight) * spriteWidth +(h_cnt-hbp) % spriteWidth) * 3 + 2 + vRamOut * spriteMemSize;
								end
						end
					else
						begin
							vRamPos <= 9'b0;
							fontRomPosRed <= 9'b0;
							fontRomPosGreen <= 9'b0;
							fontRomPosBlue <= 9'b0;
						end
				end
		  end
	
	 
	 
	 assign vRed =   (h_active & v_active)  ?  fontRomRed : 4'b0000;
	 assign vGreen = (h_active & v_active)  ?  fontRomGreen : 4'b0000;
	 assign vBlue =  (h_active & v_active)  ?  fontRomBlue : 4'b0000;
endmodule
