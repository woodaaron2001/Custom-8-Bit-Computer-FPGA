                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module keyboard
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _keyboard
                                     13 	.globl _charY
                                     14 	.globl _charX
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area _DATA
      000000                         22 _charX::
      000000                         23 	.ds 2
      000002                         24 _charY::
      000002                         25 	.ds 2
      000004                         26 _keyboard::
      000004                         27 	.ds 2
                                     28 ;--------------------------------------------------------
                                     29 ; ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area _INITIALIZED
                                     32 ;--------------------------------------------------------
                                     33 ; absolute external ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area _DABS (ABS)
                                     36 ;--------------------------------------------------------
                                     37 ; global & static initialisations
                                     38 ;--------------------------------------------------------
                                     39 	.area _HOME
                                     40 	.area _GSINIT
                                     41 	.area _GSFINAL
                                     42 	.area _GSINIT
                                     43 ;--------------------------------------------------------
                                     44 ; Home
                                     45 ;--------------------------------------------------------
                                     46 	.area _HOME
                                     47 	.area _HOME
                                     48 ;--------------------------------------------------------
                                     49 ; code
                                     50 ;--------------------------------------------------------
                                     51 	.area _CODE
                                     52 ;keyboard.c:5: void main(void) {
                                     53 ;	---------------------------------
                                     54 ; Function main
                                     55 ; ---------------------------------
      000000                         56 _main::
                                     57 ;keyboard.c:6: while (1) {
      000000                         58 00114$:
                                     59 ;keyboard.c:8: keyboard = (volatile int*)0x3000; 
      000000 21 00 30         [10]   60 	ld	hl, #0x3000
      000003 22r04r00         [16]   61 	ld	(_keyboard), hl
                                     62 ;keyboard.c:10: charX = (volatile int*)0x3002;
      000006 2E 02            [ 7]   63 	ld	l, #0x02
      000008 22r00r00         [16]   64 	ld	(_charX), hl
                                     65 ;keyboard.c:11: charY = (volatile int*)0x3004;
      00000B 2E 04            [ 7]   66 	ld	l, #0x04
      00000D 22r02r00         [16]   67 	ld	(_charY), hl
                                     68 ;keyboard.c:13: if(*keyboard == 0x1D){
      000010 3A 00 30         [13]   69 	ld	a, (#0x3000)
      000013 D6 1D            [ 7]   70 	sub	a, #0x1d
      000015 20 09            [12]   71 	jr	NZ, 00102$
                                     72 ;keyboard.c:14: *charY = *charY-1;
      000017 ED 4B 04 30      [20]   73 	ld	bc, (#0x3004)
      00001B 0B               [ 6]   74 	dec	bc
      00001C ED 43 04 30      [20]   75 	ld	(0x3004), bc
      000020                         76 00102$:
                                     77 ;keyboard.c:17: if(*keyboard == 0x1B){
      000020 2Ar04r00         [16]   78 	ld	hl, (_keyboard)
      000023 7E               [ 7]   79 	ld	a, (hl)
      000024 D6 1B            [ 7]   80 	sub	a, #0x1b
      000026 20 0B            [12]   81 	jr	NZ, 00104$
                                     82 ;keyboard.c:18: *charY = *charY+1;
      000028 2Ar02r00         [16]   83 	ld	hl, (_charY)
      00002B 4E               [ 7]   84 	ld	c, (hl)
      00002C 23               [ 6]   85 	inc	hl
      00002D 46               [ 7]   86 	ld	b, (hl)
      00002E 2B               [ 6]   87 	dec	hl
      00002F 03               [ 6]   88 	inc	bc
      000030 71               [ 7]   89 	ld	(hl), c
      000031 23               [ 6]   90 	inc	hl
      000032 70               [ 7]   91 	ld	(hl), b
      000033                         92 00104$:
                                     93 ;keyboard.c:21: if(*keyboard == 0x23){
      000033 2Ar04r00         [16]   94 	ld	hl, (_keyboard)
      000036 7E               [ 7]   95 	ld	a, (hl)
      000037 D6 23            [ 7]   96 	sub	a, #0x23
      000039 20 0F            [12]   97 	jr	NZ, 00106$
                                     98 ;keyboard.c:22: *charX = *charX+1;
      00003B ED 4Br00r00      [20]   99 	ld	bc, (_charX)
      00003F 69               [ 4]  100 	ld	l, c
      000040 60               [ 4]  101 	ld	h, b
      000041 5E               [ 7]  102 	ld	e, (hl)
      000042 23               [ 6]  103 	inc	hl
      000043 56               [ 7]  104 	ld	d, (hl)
      000044 13               [ 6]  105 	inc	de
      000045 7B               [ 4]  106 	ld	a, e
      000046 02               [ 7]  107 	ld	(bc), a
      000047 03               [ 6]  108 	inc	bc
      000048 7A               [ 4]  109 	ld	a, d
      000049 02               [ 7]  110 	ld	(bc), a
      00004A                        111 00106$:
                                    112 ;keyboard.c:25: if(*keyboard == 0x1C){
      00004A 2Ar04r00         [16]  113 	ld	hl, (_keyboard)
      00004D 7E               [ 7]  114 	ld	a, (hl)
      00004E D6 1C            [ 7]  115 	sub	a, #0x1c
      000050 20 0B            [12]  116 	jr	NZ, 00108$
                                    117 ;keyboard.c:22: *charX = *charX+1;
      000052 2Ar00r00         [16]  118 	ld	hl, (_charX)
                                    119 ;keyboard.c:26: *charX = *charX-1;
      000055 4E               [ 7]  120 	ld	c, (hl)
      000056 23               [ 6]  121 	inc	hl
      000057 46               [ 7]  122 	ld	b, (hl)
      000058 2B               [ 6]  123 	dec	hl
      000059 0B               [ 6]  124 	dec	bc
      00005A 71               [ 7]  125 	ld	(hl), c
      00005B 23               [ 6]  126 	inc	hl
      00005C 70               [ 7]  127 	ld	(hl), b
      00005D                        128 00108$:
                                    129 ;keyboard.c:22: *charX = *charX+1;
      00005D ED 4Br00r00      [20]  130 	ld	bc, (_charX)
                                    131 ;keyboard.c:30: if(*charX > 640){
      000061 69               [ 4]  132 	ld	l, c
      000062 60               [ 4]  133 	ld	h, b
      000063 5E               [ 7]  134 	ld	e, (hl)
      000064 23               [ 6]  135 	inc	hl
      000065 56               [ 7]  136 	ld	d, (hl)
      000066 3E 80            [ 7]  137 	ld	a, #0x80
      000068 BB               [ 4]  138 	cp	a, e
      000069 3E 02            [ 7]  139 	ld	a, #0x02
      00006B 9A               [ 4]  140 	sbc	a, d
      00006C E2r71r00         [10]  141 	jp	PO, 00161$
      00006F EE 80            [ 7]  142 	xor	a, #0x80
      000071                        143 00161$:
      000071 F2r78r00         [10]  144 	jp	P, 00110$
                                    145 ;keyboard.c:31: *charX = 0;
      000074 AF               [ 4]  146 	xor	a, a
      000075 02               [ 7]  147 	ld	(bc), a
      000076 03               [ 6]  148 	inc	bc
      000077 02               [ 7]  149 	ld	(bc), a
      000078                        150 00110$:
                                    151 ;keyboard.c:18: *charY = *charY+1;
      000078 ED 4Br02r00      [20]  152 	ld	bc, (_charY)
                                    153 ;keyboard.c:36: if(*charY > 640){
      00007C 69               [ 4]  154 	ld	l, c
      00007D 60               [ 4]  155 	ld	h, b
      00007E 5E               [ 7]  156 	ld	e, (hl)
      00007F 23               [ 6]  157 	inc	hl
      000080 56               [ 7]  158 	ld	d, (hl)
      000081 3E 80            [ 7]  159 	ld	a, #0x80
      000083 BB               [ 4]  160 	cp	a, e
      000084 3E 02            [ 7]  161 	ld	a, #0x02
      000086 9A               [ 4]  162 	sbc	a, d
      000087 E2r8Cr00         [10]  163 	jp	PO, 00162$
      00008A EE 80            [ 7]  164 	xor	a, #0x80
      00008C                        165 00162$:
      00008C F2r00r00         [10]  166 	jp	P, 00114$
                                    167 ;keyboard.c:37: *charY = 0;
      00008F AF               [ 4]  168 	xor	a, a
      000090 02               [ 7]  169 	ld	(bc), a
      000091 03               [ 6]  170 	inc	bc
      000092 02               [ 7]  171 	ld	(bc), a
                                    172 ;keyboard.c:41: }
      000093 C3r00r00         [10]  173 	jp	00114$
                                    174 	.area _CODE
                                    175 	.area _INITIALIZER
                                    176 	.area _CABS (ABS)
