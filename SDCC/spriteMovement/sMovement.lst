                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module sMovement
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _charY
                                     13 	.globl _charX
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area _DATA
      000000                         21 _charX::
      000000                         22 	.ds 2
      000002                         23 _charY::
      000002                         24 	.ds 2
                                     25 ;--------------------------------------------------------
                                     26 ; ram data
                                     27 ;--------------------------------------------------------
                                     28 	.area _INITIALIZED
                                     29 ;--------------------------------------------------------
                                     30 ; absolute external ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area _DABS (ABS)
                                     33 ;--------------------------------------------------------
                                     34 ; global & static initialisations
                                     35 ;--------------------------------------------------------
                                     36 	.area _HOME
                                     37 	.area _GSINIT
                                     38 	.area _GSFINAL
                                     39 	.area _GSINIT
                                     40 ;--------------------------------------------------------
                                     41 ; Home
                                     42 ;--------------------------------------------------------
                                     43 	.area _HOME
                                     44 	.area _HOME
                                     45 ;--------------------------------------------------------
                                     46 ; code
                                     47 ;--------------------------------------------------------
                                     48 	.area _CODE
                                     49 ;sMovement.c:4: void main(void) {
                                     50 ;	---------------------------------
                                     51 ; Function main
                                     52 ; ---------------------------------
      000000                         53 _main::
                                     54 ;sMovement.c:5: while (1) {
      000000                         55 00106$:
                                     56 ;sMovement.c:7: charX = (volatile int*)0x3002;
      000000 21 02 30         [10]   57 	ld	hl, #0x3002
      000003 22r00r00         [16]   58 	ld	(_charX), hl
                                     59 ;sMovement.c:8: *charX = *charX+1;
      000006 ED 4B 02 30      [20]   60 	ld	bc, (#0x3002)
      00000A 03               [ 6]   61 	inc	bc
      00000B ED 43 02 30      [20]   62 	ld	(0x3002), bc
                                     63 ;sMovement.c:10: if(*charX > 640){
      00000F 2Ar00r00         [16]   64 	ld	hl, (_charX)
      000012 4E               [ 7]   65 	ld	c, (hl)
      000013 23               [ 6]   66 	inc	hl
      000014 46               [ 7]   67 	ld	b, (hl)
      000015 2B               [ 6]   68 	dec	hl
      000016 3E 80            [ 7]   69 	ld	a, #0x80
      000018 B9               [ 4]   70 	cp	a, c
      000019 3E 02            [ 7]   71 	ld	a, #0x02
      00001B 98               [ 4]   72 	sbc	a, b
      00001C E2r21r00         [10]   73 	jp	PO, 00125$
      00001F EE 80            [ 7]   74 	xor	a, #0x80
      000021                         75 00125$:
      000021 F2r28r00         [10]   76 	jp	P, 00102$
                                     77 ;sMovement.c:11: *charX = 0;
      000024 AF               [ 4]   78 	xor	a, a
      000025 77               [ 7]   79 	ld	(hl), a
      000026 23               [ 6]   80 	inc	hl
      000027 77               [ 7]   81 	ld	(hl), a
      000028                         82 00102$:
                                     83 ;sMovement.c:14: charY = (volatile int*)0x3004;
      000028 21 04 30         [10]   84 	ld	hl, #0x3004
      00002B 22r02r00         [16]   85 	ld	(_charY), hl
                                     86 ;sMovement.c:15: *charY = *charY+1;
      00002E ED 4B 04 30      [20]   87 	ld	bc, (#0x3004)
      000032 03               [ 6]   88 	inc	bc
      000033 ED 43 04 30      [20]   89 	ld	(0x3004), bc
                                     90 ;sMovement.c:17: if(*charY > 640){
      000037 2Ar02r00         [16]   91 	ld	hl, (_charY)
      00003A 4E               [ 7]   92 	ld	c, (hl)
      00003B 23               [ 6]   93 	inc	hl
      00003C 46               [ 7]   94 	ld	b, (hl)
      00003D 2B               [ 6]   95 	dec	hl
      00003E 3E 80            [ 7]   96 	ld	a, #0x80
      000040 B9               [ 4]   97 	cp	a, c
      000041 3E 02            [ 7]   98 	ld	a, #0x02
      000043 98               [ 4]   99 	sbc	a, b
      000044 E2r49r00         [10]  100 	jp	PO, 00126$
      000047 EE 80            [ 7]  101 	xor	a, #0x80
      000049                        102 00126$:
      000049 F2r00r00         [10]  103 	jp	P, 00106$
                                    104 ;sMovement.c:18: *charY = 0;
      00004C AF               [ 4]  105 	xor	a, a
      00004D 77               [ 7]  106 	ld	(hl), a
      00004E 23               [ 6]  107 	inc	hl
      00004F 77               [ 7]  108 	ld	(hl), a
                                    109 ;sMovement.c:22: }
      000050 18 AE            [12]  110 	jr	00106$
                                    111 	.area _CODE
                                    112 	.area _INITIALIZER
                                    113 	.area _CABS (ABS)
